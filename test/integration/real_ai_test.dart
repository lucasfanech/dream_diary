import 'package:flutter_test/flutter_test.dart';
import 'package:dream_diary/core/services/ai_service.dart';
import 'package:dream_diary/shared/models/dream.dart';

void main() {
  group('Real AI Integration Tests', () {
    late AIService aiService;
    
    setUp(() {
      aiService = AIService();
    });
    
    test('should work with real API key (if configured)', () async {
      print('üöÄ [REAL_AI_TEST] Test avec vraie cl√© API (si configur√©e)');
      
      // Cr√©er un r√™ve de test
      final testDream = Dream(
        id: 'real_test_dream',
        title: 'Test Dream',
        content: '''
        Je volais dans un ciel bleu infini avec des ailes dor√©es √©tincelantes. 
        Le vent me portait doucement vers des montagnes lointaines couvertes de neige. 
        En dessous de moi, je voyais des for√™ts verdoyantes et des lacs cristallins. 
        Je me sentais libre et en paix, comme si j'√©tais enfin chez moi.
        ''',
        createdAt: DateTime.now(),
        tags: [],
      );
      
      try {
        // Tenter d'initialiser le service
        await aiService.initialize();
        print('‚úÖ [REAL_AI_TEST] Service initialis√© avec succ√®s');
        
        // Tester l'am√©lioration du r√™ve
        print('üîç [REAL_AI_TEST] Test d\'am√©lioration du r√™ve...');
        final enhancedDream = await aiService.enhanceDream(testDream);
        
        print('‚úÖ [REAL_AI_TEST] R√™ve am√©lior√© avec succ√®s !');
        print('üìù [REAL_AI_TEST] Titre: ${enhancedDream.title}');
        print('üìÑ [REAL_AI_TEST] R√©sum√©: ${enhancedDream.summary}');
        print('üè∑Ô∏è [REAL_AI_TEST] Tags: ${enhancedDream.tags}');
        print('üîç [REAL_AI_TEST] Analyse IA: ${enhancedDream.aiAnalysis}');
        
        // V√©rifications
        expect(enhancedDream.title, isNotEmpty);
        expect(enhancedDream.summary, isNotEmpty);
        expect(enhancedDream.tags, isNotEmpty);
        expect(enhancedDream.aiAnalysis, isA<Map<String, dynamic>>());
        
        // V√©rifier que l'analyse a √©t√© pars√©e avec succ√®s
        if (enhancedDream.aiAnalysis != null) {
          final analysis = enhancedDream.aiAnalysis!;
          expect(analysis['parsed_successfully'], isTrue);
          expect(analysis['emotions'], isA<List>());
          expect(analysis['themes'], isA<List>());
          expect(analysis['symbols'], isA<List>());
          expect(analysis['interpretation'], isA<String>());
          
          print('üéâ [REAL_AI_TEST] Analyse IA compl√®te et valide !');
        }
        
      } catch (e) {
        print('‚ùå [REAL_AI_TEST] Erreur (probablement pas de cl√© API): $e');
        
        // Si c'est une erreur de cl√© API manquante, c'est normal
        if (e.toString().contains('apiKeyMissing') || 
            e.toString().contains('NotInitializedError')) {
          print('‚ÑπÔ∏è [REAL_AI_TEST] Test ignor√© - Pas de cl√© API configur√©e');
          return;
        }
        
        // Sinon, c'est une vraie erreur
        rethrow;
      }
    });
    
    test('should parse different types of AI responses', () async {
      print('üîß [REAL_AI_TEST] Test de parsing de diff√©rents types de r√©ponses');
      
      // Test 1: R√©ponse simple
      const simpleResponse = '''
      {
        "emotions": ["joie", "libert√©"],
        "themes": ["vol", "√©vasion"],
        "symbols": ["ailes", "ciel"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir de libert√©",
        "dream_type": "normal"
      }
      ''';
      
      final simpleResult = aiService.parseAnalysisResponse(simpleResponse);
      print('‚úÖ [REAL_AI_TEST] R√©ponse simple pars√©e: ${simpleResult['parsed_successfully']}');
      expect(simpleResult['parsed_successfully'], isTrue);
      
      // Test 2: R√©ponse avec backticks
      const responseWithBackticks = '''
      Voici l'analyse de votre r√™ve:
      
      ```json
      {
        "emotions": ["joie", "libert√©"],
        "themes": ["vol", "√©vasion"],
        "symbols": ["ailes", "ciel"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir de libert√©",
        "dream_type": "normal"
      }
      ```
      
      Cette analyse vous aide √† comprendre votre subconscient.
      ''';
      
      final backticksResult = aiService.parseAnalysisResponse(responseWithBackticks);
      print('‚úÖ [REAL_AI_TEST] R√©ponse avec backticks pars√©e: ${backticksResult['parsed_successfully']}');
      expect(backticksResult['parsed_successfully'], isTrue);
      
      // Test 3: R√©ponse complexe
      const complexResponse = '''
      {
        "emotions": ["joie", "libert√©", "√©merveillement"],
        "themes": ["vol", "√©vasion", "nature"],
        "symbols": ["ailes", "ciel", "montagnes"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir profond de libert√© et d'√©vasion",
        "dream_type": "lucide",
        "psychological_meaning": "Expression de l'√¢me qui cherche √† s'√©lever",
        "archetypes": ["h√©ros", "sagesse"],
        "color_analysis": "Le bleu du ciel repr√©sente la s√©r√©nit√© et la spiritualit√©",
        "setting_analysis": "L'environnement a√©rien sugg√®re une √©l√©vation spirituelle",
        "character_analysis": "Le r√™veur est seul, sugg√©rant une qu√™te personnelle",
        "action_analysis": "Le vol repr√©sente la transcendance des limitations terrestres",
        "recurring_patterns": ["vol", "libert√©"],
        "personal_growth": "D√©veloppement de la confiance en soi et de l'ind√©pendance",
        "warnings": [],
        "recommendations": ["Pratiquer la m√©ditation", "Explorer la cr√©ativit√©"]
      }
      ''';
      
      final complexResult = aiService.parseAnalysisResponse(complexResponse);
      print('‚úÖ [REAL_AI_TEST] R√©ponse complexe pars√©e: ${complexResult['parsed_successfully']}');
      expect(complexResult['parsed_successfully'], isTrue);
      expect(complexResult['psychological_meaning'], isNotEmpty);
      expect(complexResult['archetypes'], isA<List>());
      expect(complexResult['recommendations'], isA<List>());
      
      print('üéâ [REAL_AI_TEST] Tous les tests de parsing r√©ussis !');
    });
  });
}
