import 'package:flutter_test/flutter_test.dart';
import 'package:dream_diary/core/services/ai_service.dart';
import 'package:dream_diary/core/services/tag_service.dart';
import 'package:dream_diary/core/services/emotion_analysis_service.dart';
import 'package:dream_diary/shared/models/dream.dart';

void main() {
  group('Dream Analysis Integration Tests', () {
    late AIService aiService;
    late TagService tagService;
    late EmotionAnalysisService emotionService;
    
    setUp(() {
      aiService = AIService();
      tagService = TagService();
      emotionService = EmotionAnalysisService();
    });
    
    test('should perform complete dream analysis workflow', () async {
      print('üöÄ [INTEGRATION_TEST] D√©but du test d\'int√©gration complet');
      
      // Cr√©er un r√™ve de test
      final testDream = Dream(
        id: 'integration_test_dream',
        title: 'R√™ve de Test',
        content: '''
        Je volais dans un ciel bleu infini avec des ailes dor√©es √©tincelantes. 
        Le vent me portait doucement vers des montagnes lointaines couvertes de neige. 
        En dessous de moi, je voyais des for√™ts verdoyantes et des lacs cristallins. 
        Je me sentais libre et en paix, comme si j'√©tais enfin chez moi.
        ''',
        createdAt: DateTime.now(),
        tags: [],
      );
      
      print('üìù [INTEGRATION_TEST] R√™ve de test cr√©√©: ${testDream.title}');
      print('üìÑ [INTEGRATION_TEST] Contenu: ${testDream.content}');
      
      // Test 1: Am√©lioration du r√™ve avec l'IA
      print('\nüîç [INTEGRATION_TEST] Test 1: Am√©lioration du r√™ve avec l\'IA');
      try {
        final enhancedDream = await aiService.enhanceDream(testDream);
        print('‚úÖ [INTEGRATION_TEST] R√™ve am√©lior√© avec succ√®s');
        print('   - Titre: ${enhancedDream.title}');
        print('   - R√©sum√©: ${enhancedDream.summary}');
        print('   - Tags: ${enhancedDream.tags}');
        print('   - Analyse IA: ${enhancedDream.aiAnalysis?.keys}');
      } catch (e) {
        print('‚ùå [INTEGRATION_TEST] Erreur am√©lioration IA: $e');
      }
      
      // Test 2: Cat√©gorisation du r√™ve
      print('\nüè∑Ô∏è [INTEGRATION_TEST] Test 2: Cat√©gorisation du r√™ve');
      try {
        final categorization = await tagService.categorizeDream(testDream.content);
        print('‚úÖ [INTEGRATION_TEST] Cat√©gorisation r√©ussie');
        print('   - Cat√©gorie principale: ${categorization['primary_category']}');
        print('   - Sous-cat√©gories: ${categorization['subcategories']}');
        print('   - Cat√©gorie √©motionnelle: ${categorization['emotional_category']}');
      } catch (e) {
        print('‚ùå [INTEGRATION_TEST] Erreur cat√©gorisation: $e');
      }
      
      // Test 3: Tags intelligents
      print('\nüß† [INTEGRATION_TEST] Test 3: G√©n√©ration de tags intelligents');
      try {
        final intelligentTags = await tagService.generateIntelligentTags(testDream.content);
        print('‚úÖ [INTEGRATION_TEST] Tags intelligents g√©n√©r√©s');
        print('   - Nombre de cat√©gories: ${intelligentTags.length}');
        for (final tagCategory in intelligentTags) {
          print('   - ${tagCategory['type']}: ${tagCategory['tags']}');
        }
      } catch (e) {
        print('‚ùå [INTEGRATION_TEST] Erreur tags intelligents: $e');
      }
      
      // Test 4: Analyse √©motionnelle
      print('\nüé≠ [INTEGRATION_TEST] Test 4: Analyse √©motionnelle');
      try {
        final emotionAnalysis = await aiService.analyzeEmotions(testDream.content);
        print('‚úÖ [INTEGRATION_TEST] Analyse √©motionnelle r√©ussie');
        print('   - √âmotions primaires: ${emotionAnalysis['primary_emotions']}');
        print('   - Parcours √©motionnel: ${emotionAnalysis['emotional_journey']}');
      } catch (e) {
        print('‚ùå [INTEGRATION_TEST] Erreur analyse √©motionnelle: $e');
      }
      
      // Test 5: Analyse symbolique
      print('\nüîÆ [INTEGRATION_TEST] Test 5: Analyse symbolique');
      try {
        final symbolAnalysis = await aiService.analyzeSymbols(testDream.content);
        print('‚úÖ [INTEGRATION_TEST] Analyse symbolique r√©ussie');
        print('   - Symboles primaires: ${symbolAnalysis['primary_symbols']}');
        print('   - Analyse des couleurs: ${symbolAnalysis['color_symbols']}');
      } catch (e) {
        print('‚ùå [INTEGRATION_TEST] Erreur analyse symbolique: $e');
      }
      
      print('\nüéâ [INTEGRATION_TEST] Test d\'int√©gration termin√©');
    });
    
    test('should analyze multiple dreams for patterns', () async {
      print('üîÑ [INTEGRATION_TEST] Test d\'analyse de patterns sur plusieurs r√™ves');
      
      final dreams = [
        Dream(
          id: 'dream_1',
          title: 'R√™ve de vol',
          content: 'Je volais dans le ciel bleu avec des ailes dor√©es',
          createdAt: DateTime.now().subtract(const Duration(days: 3)),
          emotion: 'joie',
          tags: ['vol', 'ciel', 'libert√©'],
        ),
        Dream(
          id: 'dream_2',
          title: 'R√™ve de montagne',
          content: 'Je grimpais une montagne enneig√©e vers le sommet',
          createdAt: DateTime.now().subtract(const Duration(days: 2)),
          emotion: 'd√©termination',
          tags: ['montagne', 'escalade', 'd√©fi'],
        ),
        Dream(
          id: 'dream_3',
          title: 'R√™ve de vol 2',
          content: 'Je volais encore dans le ciel, mais cette fois avec des ailes argent√©es',
          createdAt: DateTime.now().subtract(const Duration(days: 1)),
          emotion: 's√©r√©nit√©',
          tags: ['vol', 'ciel', 'argent'],
        ),
      ];
      
      // Test d'√©volution √©motionnelle
      print('\nüìà [INTEGRATION_TEST] Test d\'√©volution √©motionnelle');
      try {
        final evolution = await emotionService.analyzeEmotionalEvolution(dreams);
        print('‚úÖ [INTEGRATION_TEST] √âvolution √©motionnelle analys√©e');
        print('   - Timeline: ${evolution['emotional_timeline']}');
        print('   - Tendances: ${evolution['emotional_trends']}');
      } catch (e) {
        print('‚ùå [INTEGRATION_TEST] Erreur √©volution √©motionnelle: $e');
      }
      
      // Test de th√®mes r√©currents
      print('\nüîÑ [INTEGRATION_TEST] Test de th√®mes r√©currents');
      try {
        final themes = await emotionService.detectRecurringThemes(dreams);
        print('‚úÖ [INTEGRATION_TEST] Th√®mes r√©currents d√©tect√©s');
        print('   - Th√®mes r√©currents: ${themes['recurring_themes']}');
        print('   - Connexions: ${themes['theme_connections']}');
      } catch (e) {
        print('‚ùå [INTEGRATION_TEST] Erreur th√®mes r√©currents: $e');
      }
      
      // Test de patterns de tags
      print('\nüè∑Ô∏è [INTEGRATION_TEST] Test de patterns de tags');
      try {
        final patterns = await tagService.analyzeTagPatterns(dreams);
        print('‚úÖ [INTEGRATION_TEST] Patterns de tags analys√©s');
        print('   - Tags les plus communs: ${patterns['most_common_tags']}');
        print('   - Combinaisons: ${patterns['tag_combinations']}');
      } catch (e) {
        print('‚ùå [INTEGRATION_TEST] Erreur patterns de tags: $e');
      }
      
      print('\nüéâ [INTEGRATION_TEST] Test de patterns termin√©');
    });
  });
}
