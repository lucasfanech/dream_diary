import 'package:flutter_test/flutter_test.dart';
import 'dart:convert';

void main() {
  group('JSON Parsing Tests', () {
    test('should parse simple JSON response', () {
      const jsonString = '''
      {
        "emotions": ["joie", "libert√©"],
        "themes": ["vol", "√©vasion"],
        "symbols": ["ailes", "ciel"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir de libert√©",
        "dream_type": "normal"
      }
      ''';
      
      final result = jsonDecode(jsonString);
      print('‚úÖ [JSON_TEST] Parsing r√©ussi: $result');
      
      expect(result, isA<Map<String, dynamic>>());
      expect(result['emotions'], isA<List>());
      expect(result['themes'], isA<List>());
      expect(result['symbols'], isA<List>());
      expect(result['interpretation'], isA<String>());
      expect(result['dream_type'], isA<String>());
    });
    
    test('should parse complex JSON response', () {
      const jsonString = '''
      {
        "emotions": ["joie", "libert√©", "√©merveillement"],
        "themes": ["vol", "√©vasion", "nature"],
        "symbols": ["ailes", "ciel", "montagnes"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir profond de libert√© et d'√©vasion",
        "dream_type": "lucide",
        "psychological_meaning": "Expression de l'√¢me qui cherche √† s'√©lever",
        "archetypes": ["h√©ros", "sagesse"],
        "color_analysis": "Le bleu du ciel repr√©sente la s√©r√©nit√© et la spiritualit√©",
        "setting_analysis": "L'environnement a√©rien sugg√®re une √©l√©vation spirituelle",
        "character_analysis": "Le r√™veur est seul, sugg√©rant une qu√™te personnelle",
        "action_analysis": "Le vol repr√©sente la transcendance des limitations terrestres",
        "recurring_patterns": ["vol", "libert√©"],
        "personal_growth": "D√©veloppement de la confiance en soi et de l'ind√©pendance",
        "warnings": [],
        "recommendations": ["Pratiquer la m√©ditation", "Explorer la cr√©ativit√©"]
      }
      ''';
      
      final result = jsonDecode(jsonString);
      print('‚úÖ [JSON_TEST] Parsing complexe r√©ussi: $result');
      
      expect(result, isA<Map<String, dynamic>>());
      expect(result['emotions'], isA<List>());
      expect(result['themes'], isA<List>());
      expect(result['symbols'], isA<List>());
      expect(result['psychological_meaning'], isA<String>());
      expect(result['archetypes'], isA<List>());
      expect(result['recommendations'], isA<List>());
    });
    
    test('should handle JSON with backticks', () {
      const responseWithBackticks = '''
      Voici l'analyse de votre r√™ve:
      
      ```json
      {
        "emotions": ["joie", "libert√©"],
        "themes": ["vol", "√©vasion"],
        "symbols": ["ailes", "ciel"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir de libert√©",
        "dream_type": "normal"
      }
      ```
      
      Cette analyse vous aide √† comprendre votre subconscient.
      ''';
      
      // Simuler l'extraction du JSON
      String cleanResponse = responseWithBackticks;
      if (cleanResponse.contains('```json')) {
        cleanResponse = cleanResponse.split('```json')[1].split('```')[0];
      }
      
      print('üßπ [JSON_TEST] JSON extrait: $cleanResponse');
      
      final result = jsonDecode(cleanResponse);
      print('‚úÖ [JSON_TEST] Parsing avec backticks r√©ussi: $result');
      
      expect(result, isA<Map<String, dynamic>>());
      expect(result['emotions'], isA<List>());
      expect(result['themes'], isA<List>());
    });
    
    test('should handle malformed JSON gracefully', () {
      const malformedJson = '''
      {
        "emotions": ["joie", "libert√©",
        "themes": ["vol", "√©vasion"],
        "symbols": ["ailes", "ciel"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir de libert√©",
        "dream_type": "normal"
      }
      ''';
      
      try {
        final result = jsonDecode(malformedJson);
        fail('Should throw exception for malformed JSON');
      } catch (e) {
        print('‚úÖ [JSON_TEST] Erreur JSON malform√© g√©r√©e correctement: $e');
        expect(e, isA<FormatException>());
      }
    });
    
    test('should handle empty JSON', () {
      const emptyJson = '{}';
      
      final result = jsonDecode(emptyJson);
      print('‚úÖ [JSON_TEST] JSON vide pars√©: $result');
      
      expect(result, isA<Map<String, dynamic>>());
      expect(result.isEmpty, isTrue);
    });
    
    test('should handle null values in JSON', () {
      const jsonWithNulls = '''
      {
        "emotions": ["joie", "libert√©"],
        "themes": null,
        "symbols": ["ailes", "ciel"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir de libert√©",
        "dream_type": "normal"
      }
      ''';
      
      final result = jsonDecode(jsonWithNulls);
      print('‚úÖ [JSON_TEST] JSON avec nulls pars√©: $result');
      
      expect(result, isA<Map<String, dynamic>>());
      expect(result['emotions'], isA<List>());
      expect(result['themes'], isNull);
      expect(result['symbols'], isA<List>());
    });
  });
}
