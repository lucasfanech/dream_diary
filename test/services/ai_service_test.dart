import 'package:flutter_test/flutter_test.dart';
import 'package:dream_diary/core/services/ai_service.dart';
import 'package:dream_diary/shared/models/dream.dart';

void main() {
  group('AIService Tests', () {
    late AIService aiService;
    
    setUp(() {
      aiService = AIService();
    });
    
    test('should initialize without API key (mock mode)', () async {
      // Test d'initialisation sans cl√© API
      try {
        await aiService.initialize();
        fail('Should throw exception when API key is missing');
      } catch (e) {
        expect(e.toString(), contains('apiKeyMissing'));
      }
    });
    
    test('should generate dream title', () async {
      // Test de g√©n√©ration de titre
      const dreamContent = 'Je volais dans le ciel bleu avec des ailes dor√©es.';
      
      try {
        final title = await aiService.generateDreamTitle(dreamContent);
        print('üìù [TEST] Titre g√©n√©r√©: $title');
        expect(title, isNotEmpty);
        expect(title, isNot(equals('R√™ve sans titre')));
      } catch (e) {
        print('‚ùå [TEST] Erreur g√©n√©ration titre: $e');
        // En mode test sans API, on s'attend √† une erreur
        expect(e.toString(), contains('apiKeyMissing'));
      }
    });
    
    test('should generate dream summary', () async {
      // Test de g√©n√©ration de r√©sum√©
      const dreamContent = 'Je volais dans le ciel bleu avec des ailes dor√©es. Le vent me portait vers des montagnes lointaines.';
      
      try {
        final summary = await aiService.generateDreamSummary(dreamContent);
        print('üìÑ [TEST] R√©sum√© g√©n√©r√©: $summary');
        expect(summary, isNotEmpty);
        expect(summary, isNot(equals('R√©sum√© non disponible')));
      } catch (e) {
        print('‚ùå [TEST] Erreur g√©n√©ration r√©sum√©: $e');
        expect(e.toString(), contains('apiKeyMissing'));
      }
    });
    
    test('should analyze dream', () async {
      // Test d'analyse de r√™ve
      const dreamContent = 'Je volais dans le ciel bleu avec des ailes dor√©es. Le vent me portait vers des montagnes lointaines.';
      
      try {
        final analysis = await aiService.analyzeDream(dreamContent);
        print('üîç [TEST] Analyse g√©n√©r√©e:');
        print(analysis);
        expect(analysis, isA<Map<String, dynamic>>());
        expect(analysis['emotions'], isA<List>());
        expect(analysis['themes'], isA<List>());
        expect(analysis['symbols'], isA<List>());
      } catch (e) {
        print('‚ùå [TEST] Erreur analyse r√™ve: $e');
        expect(e.toString(), contains('apiKeyMissing'));
      }
    });
    
    test('should generate dream tags', () async {
      // Test de g√©n√©ration de tags
      const dreamContent = 'Je volais dans le ciel bleu avec des ailes dor√©es. Le vent me portait vers des montagnes lointaines.';
      
      try {
        final tags = await aiService.generateDreamTags(dreamContent);
        print('üè∑Ô∏è [TEST] Tags g√©n√©r√©s: $tags');
        expect(tags, isA<List<String>>());
        expect(tags.length, greaterThan(0));
      } catch (e) {
        print('‚ùå [TEST] Erreur g√©n√©ration tags: $e');
        expect(e.toString(), contains('apiKeyMissing'));
      }
    });
    
    test('should enhance dream with AI', () async {
      // Test d'am√©lioration compl√®te d'un r√™ve
      final dream = Dream(
        id: 'test_dream_1',
        title: 'Test Dream',
        content: 'Je volais dans le ciel bleu avec des ailes dor√©es. Le vent me portait vers des montagnes lointaines.',
        createdAt: DateTime.now(),
        tags: [],
      );
      
      try {
        final enhancedDream = await aiService.enhanceDream(dream);
        print('‚ú® [TEST] R√™ve am√©lior√©:');
        print('Titre: ${enhancedDream.title}');
        print('R√©sum√©: ${enhancedDream.summary}');
        print('Tags: ${enhancedDream.tags}');
        print('Analyse IA: ${enhancedDream.aiAnalysis}');
        
        expect(enhancedDream.title, isNotEmpty);
        expect(enhancedDream.summary, isNotEmpty);
        expect(enhancedDream.tags, isNotEmpty);
        expect(enhancedDream.aiAnalysis, isA<Map<String, dynamic>>());
      } catch (e) {
        print('‚ùå [TEST] Erreur am√©lioration r√™ve: $e');
        expect(e.toString(), contains('apiKeyMissing'));
      }
    });
    
    test('should parse analysis response correctly', () async {
      // Test du parsing des r√©ponses
      const mockResponse = '''
      {
        "emotions": ["joie", "libert√©"],
        "themes": ["vol", "√©vasion"],
        "symbols": ["ailes", "ciel"],
        "interpretation": "Ce r√™ve repr√©sente un d√©sir de libert√©",
        "dream_type": "normal"
      }
      ''';
      
      final result = aiService.parseAnalysisResponse(mockResponse);
      print('üîß [TEST] R√©sultat du parsing: $result');
      
      expect(result, isA<Map<String, dynamic>>());
      expect(result['emotions'], isA<List>());
      expect(result['themes'], isA<List>());
      expect(result['symbols'], isA<List>());
    });
  });
}
