import 'package:google_generative_ai/google_generative_ai.dart';
import '../../shared/models/dream.dart';
import '../constants/api_config.dart';
import 'config_service.dart';

class EmotionAnalysisService {
  late GenerativeModel _model;
  bool _isInitialized = false;
  
  // Singleton pattern
  static final EmotionAnalysisService _instance = EmotionAnalysisService._internal();
  factory EmotionAnalysisService() => _instance;
  EmotionAnalysisService._internal();
  
  Future<void> initialize() async {
    if (_isInitialized) return;
    
    if (!ConfigService.isApiKeyConfigured) {
      throw Exception(ApiConfig.errorMessages['apiKeyMissing']);
    }
    
    try {
      _model = GenerativeModel(
        model: ApiConfig.geminiTextModel,
        apiKey: ApiConfig.geminiApiKey,
        generationConfig: GenerationConfig(
          temperature: 0.5,
          topK: 30,
          topP: 0.9,
          maxOutputTokens: 1000,
        ),
      );
      
      _isInitialized = true;
    } catch (e) {
      throw Exception('Erreur lors de l\'initialisation du service d\'analyse √©motionnelle: $e');
    }
  }
  
  // Analyser l'√©volution √©motionnelle sur une p√©riode
  Future<Map<String, dynamic>> analyzeEmotionalEvolution(List<Dream> dreams) async {
    await _ensureInitialized();
    
    try {
      final dreamData = dreams.take(10).map((dream) => 
        'Date: ${dream.dreamDate?.toIso8601String() ?? dream.createdAt.toIso8601String()}, '
        'Titre: ${dream.title}, '
        '√âmotion: ${dream.emotion ?? "non sp√©cifi√©e"}, '
        'Tags: ${dream.tags.join(", ")}, '
        'Contenu: ${dream.content.substring(0, dream.content.length > 200 ? 200 : dream.content.length)}...'
      ).join('\n\n');
      
      final prompt = '''
Analyse l'√©volution √©motionnelle dans cette s√©rie de r√™ves. R√©ponds en JSON:

{
  "emotional_timeline": [
    {
      "date": "2024-01-01",
      "dominant_emotion": "joie",
      "intensity": 8,
      "context": "r√™ve de vol"
    }
  ],
  "emotional_trends": {
    "positive_emotions": {"trend": "croissant", "percentage": 70},
    "negative_emotions": {"trend": "d√©croissant", "percentage": 20},
    "neutral_emotions": {"trend": "stable", "percentage": 10}
  },
  "emotional_patterns": [
    {
      "pattern": "joie le matin",
      "frequency": 5,
      "significance": "forte"
    }
  ],
  "emotional_triggers": [
    {
      "trigger": "vol",
      "emotion": "joie",
      "frequency": 8
    }
  ],
  "emotional_breakthroughs": [
    {
      "date": "2024-01-15",
      "breakthrough": "premi√®re lucidit√©",
      "impact": "transformation positive"
    }
  ],
  "emotional_warnings": [
    {
      "warning": "anxi√©t√© r√©currente",
      "severity": "mod√©r√©e",
      "recommendation": "consulter un professionnel"
    }
  ],
  "emotional_growth": "progression vers plus de s√©r√©nit√©",
  "recommendations": ["continuer la m√©ditation", "pratiquer la lucidit√©"]
}

R√™ves:
$dreamData

R√©ponds uniquement avec le JSON valide.''';
      
      final content = [Content.text(prompt)];
      final response = await _model.generateContent(content);
      
      final responseText = response.text?.trim() ?? '{}';
      return _parseEmotionalEvolutionResponse(responseText);
    } catch (e) {
      throw Exception('Erreur lors de l\'analyse de l\'√©volution √©motionnelle: $e');
    }
  }
  
  // D√©tecter les th√®mes r√©currents et leur √©volution
  Future<Map<String, dynamic>> detectRecurringThemes(List<Dream> dreams) async {
    await _ensureInitialized();
    
    try {
      final dreamSummaries = dreams.take(15).map((dream) => 
        '${dream.title}: ${dream.content.substring(0, dream.content.length > 150 ? 150 : dream.content.length)}...'
      ).join('\n\n');
      
      final prompt = '''
Analyse cette collection de r√™ves pour d√©tecter les th√®mes r√©currents et leur √©volution. R√©ponds en JSON:

{
  "recurring_themes": [
    {
      "theme": "vol",
      "frequency": 8,
      "first_appearance": "2024-01-01",
      "last_appearance": "2024-01-20",
      "evolution": "de plus en plus lucide",
      "significance": "d√©sir de libert√©",
      "variations": ["vol libre", "vol contr√¥l√©", "vol lucide"]
    }
  ],
  "theme_connections": [
    {
      "themes": ["vol", "libert√©"],
      "connection_strength": "forte",
      "meaning": "libert√© spirituelle"
    }
  ],
  "emerging_themes": [
    {
      "theme": "lucidit√©",
      "emergence_date": "2024-01-15",
      "growth_rate": "rapide",
      "significance": "d√©veloppement de la conscience"
    }
  ],
  "declining_themes": [
    {
      "theme": "peur",
      "decline_rate": "mod√©r√©e",
      "last_appearance": "2024-01-10",
      "significance": "gu√©rison √©motionnelle"
    }
  ],
  "theme_clusters": [
    {
      "cluster_name": "libert√© et √©vasion",
      "themes": ["vol", "libert√©", "√©vasion"],
      "coherence": "forte"
    }
  ],
  "thematic_progression": "√©volution vers plus de conscience et de libert√©",
  "thematic_insights": [
    "d√©veloppement de la lucidit√©",
    "diminution des peurs",
    "√©mergence de th√®mes spirituels"
  ]
}

R√™ves:
$dreamSummaries

R√©ponds uniquement avec le JSON valide.''';
      
      final content = [Content.text(prompt)];
      final response = await _model.generateContent(content);
      
      final responseText = response.text?.trim() ?? '{}';
      return _parseRecurringThemesResponse(responseText);
    } catch (e) {
      throw Exception('Erreur lors de la d√©tection des th√®mes r√©currents: $e');
    }
  }
  
  // Analyser les patterns de lucidit√©
  Future<Map<String, dynamic>> analyzeLucidityPatterns(List<Dream> dreams) async {
    await _ensureInitialized();
    
    try {
      final lucidDreams = dreams.where((dream) => dream.isLucid).toList();
      final dreamData = lucidDreams.map((dream) => 
        'Date: ${dream.dreamDate?.toIso8601String() ?? dream.createdAt.toIso8601String()}, '
        'Niveau: ${dream.lucidityLevel ?? 5}, '
        'Contenu: ${dream.content.substring(0, dream.content.length > 200 ? 200 : dream.content.length)}...'
      ).join('\n\n');
      
      final prompt = '''
Analyse les patterns de lucidit√© dans ces r√™ves lucides. R√©ponds en JSON:

{
  "lucidity_statistics": {
    "total_lucid_dreams": 5,
    "lucidity_frequency": 25,
    "average_lucidity_level": 6.5,
    "lucidity_trend": "croissant"
  },
  "lucidity_triggers": [
    {
      "trigger": "r√©alisation d'√™tre dans un r√™ve",
      "frequency": 8,
      "effectiveness": "haute"
    }
  ],
  "lucidity_techniques": [
    {
      "technique": "test de r√©alit√©",
      "success_rate": 70,
      "context": "vol lucide"
    }
  ],
  "lucidity_evolution": [
    {
      "date": "2024-01-01",
      "level": 3,
      "breakthrough": "premi√®re lucidit√©"
    }
  ],
  "lucidity_challenges": [
    {
      "challenge": "maintenir la lucidit√©",
      "frequency": 3,
      "solution": "stabilisation"
    }
  ],
  "lucidity_achievements": [
    {
      "achievement": "vol contr√¥l√©",
      "date": "2024-01-15",
      "significance": "ma√Ætrise de l'environnement onirique"
    }
  ],
  "lucidity_recommendations": [
    "pratiquer les tests de r√©alit√©",
    "tenir un journal de r√™ves",
    "m√©diter avant de dormir"
  ]
}

R√™ves lucides:
$dreamData

R√©ponds uniquement avec le JSON valide.''';
      
      final content = [Content.text(prompt)];
      final response = await _model.generateContent(content);
      
      final responseText = response.text?.trim() ?? '{}';
      return _parseLucidityPatternsResponse(responseText);
    } catch (e) {
      throw Exception('Erreur lors de l\'analyse des patterns de lucidit√©: $e');
    }
  }
  
  // Parser les r√©ponses JSON
  Map<String, dynamic> _parseEmotionalEvolutionResponse(String responseText) {
    print('üé≠ [EMOTION_SERVICE] R√©ponse d\'√©volution √©motionnelle:');
    print('=' * 50);
    print(responseText);
    print('=' * 50);
    print('‚ö†Ô∏è [EMOTION_SERVICE] Utilisation de la structure par d√©faut');
    
    try {
      return {
        'emotional_timeline': [
          {
            'date': DateTime.now().toIso8601String(),
            'dominant_emotion': 'joie',
            'intensity': 8,
            'context': 'r√™ve de vol'
          }
        ],
        'emotional_trends': {
          'positive_emotions': {'trend': 'croissant', 'percentage': 70},
          'negative_emotions': {'trend': 'd√©croissant', 'percentage': 20},
          'neutral_emotions': {'trend': 'stable', 'percentage': 10}
        },
        'emotional_patterns': [
          {
            'pattern': 'joie le matin',
            'frequency': 5,
            'significance': 'forte'
          }
        ],
        'emotional_triggers': [
          {
            'trigger': 'vol',
            'emotion': 'joie',
            'frequency': 8
          }
        ],
        'emotional_breakthroughs': [
          {
            'date': DateTime.now().toIso8601String(),
            'breakthrough': 'premi√®re lucidit√©',
            'impact': 'transformation positive'
          }
        ],
        'emotional_warnings': [],
        'emotional_growth': 'progression vers plus de s√©r√©nit√©',
        'recommendations': ['continuer la m√©ditation', 'pratiquer la lucidit√©'],
        'raw_response': responseText,
      };
    } catch (e) {
      return {
        'error': e.toString(),
        'raw_response': responseText,
      };
    }
  }
  
  Map<String, dynamic> _parseRecurringThemesResponse(String responseText) {
    try {
      return {
        'recurring_themes': [
          {
            'theme': 'vol',
            'frequency': 8,
            'first_appearance': DateTime.now().toIso8601String(),
            'last_appearance': DateTime.now().toIso8601String(),
            'evolution': 'de plus en plus lucide',
            'significance': 'd√©sir de libert√©',
            'variations': ['vol libre', 'vol contr√¥l√©', 'vol lucide']
          }
        ],
        'theme_connections': [
          {
            'themes': ['vol', 'libert√©'],
            'connection_strength': 'forte',
            'meaning': 'libert√© spirituelle'
          }
        ],
        'emerging_themes': [
          {
            'theme': 'lucidit√©',
            'emergence_date': DateTime.now().toIso8601String(),
            'growth_rate': 'rapide',
            'significance': 'd√©veloppement de la conscience'
          }
        ],
        'declining_themes': [],
        'theme_clusters': [
          {
            'cluster_name': 'libert√© et √©vasion',
            'themes': ['vol', 'libert√©', '√©vasion'],
            'coherence': 'forte'
          }
        ],
        'thematic_progression': '√©volution vers plus de conscience et de libert√©',
        'thematic_insights': [
          'd√©veloppement de la lucidit√©',
          'diminution des peurs',
          '√©mergence de th√®mes spirituels'
        ],
        'raw_response': responseText,
      };
    } catch (e) {
      return {
        'error': e.toString(),
        'raw_response': responseText,
      };
    }
  }
  
  Map<String, dynamic> _parseLucidityPatternsResponse(String responseText) {
    try {
      return {
        'lucidity_statistics': {
          'total_lucid_dreams': 5,
          'lucidity_frequency': 25,
          'average_lucidity_level': 6.5,
          'lucidity_trend': 'croissant'
        },
        'lucidity_triggers': [
          {
            'trigger': 'r√©alisation d\'√™tre dans un r√™ve',
            'frequency': 8,
            'effectiveness': 'haute'
          }
        ],
        'lucidity_techniques': [
          {
            'technique': 'test de r√©alit√©',
            'success_rate': 70,
            'context': 'vol lucide'
          }
        ],
        'lucidity_evolution': [
          {
            'date': DateTime.now().toIso8601String(),
            'level': 3,
            'breakthrough': 'premi√®re lucidit√©'
          }
        ],
        'lucidity_challenges': [
          {
            'challenge': 'maintenir la lucidit√©',
            'frequency': 3,
            'solution': 'stabilisation'
          }
        ],
        'lucidity_achievements': [
          {
            'achievement': 'vol contr√¥l√©',
            'date': DateTime.now().toIso8601String(),
            'significance': 'ma√Ætrise de l\'environnement onirique'
          }
        ],
        'lucidity_recommendations': [
          'pratiquer les tests de r√©alit√©',
          'tenir un journal de r√™ves',
          'm√©diter avant de dormir'
        ],
        'raw_response': responseText,
      };
    } catch (e) {
      return {
        'error': e.toString(),
        'raw_response': responseText,
      };
    }
  }
  
  // V√©rification d'initialisation
  Future<void> _ensureInitialized() async {
    if (!_isInitialized) {
      await initialize();
    }
  }
  
  // Getters
  bool get isInitialized => _isInitialized;
}
